/* tslint:disable */
/* eslint-disable */
/**
 * サンプルAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface InlineResponse201
 */
export interface InlineResponse201 {
    /**
     * ID of the created muemur.
     * @type {number}
     * @memberof InlineResponse201
     */
    murmurId?: number;
}
/**
 * 
 * @export
 * @interface Murmur
 */
export interface Murmur {
    /**
     * 
     * @type {number}
     * @memberof Murmur
     */
    murmurId?: number;
    /**
     * 
     * @type {string}
     * @memberof Murmur
     */
    text: string;
    /**
     * 
     * @type {number}
     * @memberof Murmur
     */
    postUserId?: number;
    /**
     * 
     * @type {string}
     * @memberof Murmur
     */
    postUserName?: string;
    /**
     * 
     * @type {string}
     * @memberof Murmur
     */
    postDate?: string;
}
/**
 * 
 * @export
 * @interface Ping
 */
export interface Ping {
    /**
     * 
     * @type {boolean}
     * @memberof Ping
     */
    ping: boolean;
}
/**
 * 
 * @export
 * @interface Pong
 */
export interface Pong {
    /**
     * 
     * @type {string}
     * @memberof Pong
     */
    message: string;
}

/**
 * HealthcheckApi - axios parameter creator
 * @export
 */
export const HealthcheckApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ヘルスチェック
         * @param {Ping} [ping] ping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthcheck: async (ping?: Ping, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/healthcheck`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ping, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthcheckApi - functional programming interface
 * @export
 */
export const HealthcheckApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthcheckApiAxiosParamCreator(configuration)
    return {
        /**
         * ヘルスチェック
         * @param {Ping} [ping] ping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthcheck(ping?: Ping, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Pong>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthcheck(ping, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HealthcheckApi - factory interface
 * @export
 */
export const HealthcheckApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthcheckApiFp(configuration)
    return {
        /**
         * ヘルスチェック
         * @param {Ping} [ping] ping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthcheck(ping?: Ping, options?: any): AxiosPromise<Array<Pong>> {
            return localVarFp.healthcheck(ping, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthcheckApi - object-oriented interface
 * @export
 * @class HealthcheckApi
 * @extends {BaseAPI}
 */
export class HealthcheckApi extends BaseAPI {
    /**
     * ヘルスチェック
     * @param {Ping} [ping] ping
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthcheckApi
     */
    public healthcheck(ping?: Ping, options?: any) {
        return HealthcheckApiFp(this.configuration).healthcheck(ping, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MurmursApi - axios parameter creator
 * @export
 */
export const MurmursApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 自分のつぶやきを登録する。
         * @param {number} userId 
         * @param {Murmur} [murmur] murmur
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMurmur: async (userId: number, murmur?: Murmur, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createMurmur', 'userId', userId)
            const localVarPath = `/users/{userId}/murmurs/`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(murmur, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 自分のつぶやきとフォローしているつぶやき一覧を取得する。
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMurmurs: async (userId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getMurmurs', 'userId', userId)
            const localVarPath = `/users/{userId}/murmurs/`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MurmursApi - functional programming interface
 * @export
 */
export const MurmursApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MurmursApiAxiosParamCreator(configuration)
    return {
        /**
         * 自分のつぶやきを登録する。
         * @param {number} userId 
         * @param {Murmur} [murmur] murmur
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMurmur(userId: number, murmur?: Murmur, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse201>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMurmur(userId, murmur, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 自分のつぶやきとフォローしているつぶやき一覧を取得する。
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMurmurs(userId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Murmur>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMurmurs(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MurmursApi - factory interface
 * @export
 */
export const MurmursApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MurmursApiFp(configuration)
    return {
        /**
         * 自分のつぶやきを登録する。
         * @param {number} userId 
         * @param {Murmur} [murmur] murmur
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMurmur(userId: number, murmur?: Murmur, options?: any): AxiosPromise<InlineResponse201> {
            return localVarFp.createMurmur(userId, murmur, options).then((request) => request(axios, basePath));
        },
        /**
         * 自分のつぶやきとフォローしているつぶやき一覧を取得する。
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMurmurs(userId: number, options?: any): AxiosPromise<Array<Murmur>> {
            return localVarFp.getMurmurs(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MurmursApi - object-oriented interface
 * @export
 * @class MurmursApi
 * @extends {BaseAPI}
 */
export class MurmursApi extends BaseAPI {
    /**
     * 自分のつぶやきを登録する。
     * @param {number} userId 
     * @param {Murmur} [murmur] murmur
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MurmursApi
     */
    public createMurmur(userId: number, murmur?: Murmur, options?: any) {
        return MurmursApiFp(this.configuration).createMurmur(userId, murmur, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 自分のつぶやきとフォローしているつぶやき一覧を取得する。
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MurmursApi
     */
    public getMurmurs(userId: number, options?: any) {
        return MurmursApiFp(this.configuration).getMurmurs(userId, options).then((request) => request(this.axios, this.basePath));
    }
}


